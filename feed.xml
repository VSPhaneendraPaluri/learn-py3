<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/learn-py3/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/learn-py3/" rel="alternate" type="text/html" /><updated>2020-07-14T18:37:39+05:30</updated><id>http://localhost:4000/learn-py3/feed.xml</id><title type="html">Learning Python3</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Python Testing Strategies</title><link href="http://localhost:4000/learn-py3/2020/07/14/python-testing-strategies.html" rel="alternate" type="text/html" title="Python Testing Strategies" /><published>2020-07-14T17:48:00+05:30</published><updated>2020-07-14T17:48:00+05:30</updated><id>http://localhost:4000/learn-py3/2020/07/14/python-testing-strategies</id><content type="html" xml:base="http://localhost:4000/learn-py3/2020/07/14/python-testing-strategies.html">&lt;h2 id=&quot;testing-strategies&quot;&gt;Testing Strategies&lt;/h2&gt;

&lt;p&gt;Hi folks,
The posts tha at you have seen it so far, already start dealing with few of the various available testing framworks in Python.  The objective of this post is to understand better ways to test our code using some in-built features built into unittest framwork (Python &amp;gt; 3.3).&lt;/p&gt;

&lt;h3 id=&quot;unit-testing-in-python&quot;&gt;Unit Testing in Python&lt;/h3&gt;
&lt;p&gt;When it comes to unit testing, I’m a lot amazed with the configuration and easyness that one could start writing unittests for the Object Under Test (OUT).  This is an attempt from me showcasing the various possibilities available as part of the unittest framework in Python.&lt;/p&gt;

&lt;h3 id=&quot;mocking-in-python&quot;&gt;Mocking in Python&lt;/h3&gt;
&lt;p&gt;This, in my mind, one the most versatile, easy to use features in Python for testing your Object Under Test (OUT) in an isolated way, removing out all the external/internal dependencies.  The following slide-deck should present the basic principles of testing in Python along with principles of mocking, patching, spec’ing and auto-spec’ing.&lt;/p&gt;

&lt;p&gt;Here are the links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Link to the slide-deck is &lt;a href=&quot;https://www.github.com/VSPhaneendraPaluri/learn-py3/blob/master/slide-deck/Python-Testing-Strategies.pptx?raw=true&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Link to few hands-on session is available &lt;a href=&quot;https://www.github.com/VSPhaneendraPaluri/learn-py3/tree/master/hands-on/mocking&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy Mock’ing !&lt;/p&gt;

&lt;p&gt;Just that don’t end up mocking the mocks :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Testing Strategies</summary></entry><entry><title type="html">pytest - The New Python Testing Framework</title><link href="http://localhost:4000/learn-py3/2020/07/14/pytest-python-testing-framework.html" rel="alternate" type="text/html" title="pytest - The New Python Testing Framework" /><published>2020-07-14T17:22:00+05:30</published><updated>2020-07-14T17:22:00+05:30</updated><id>http://localhost:4000/learn-py3/2020/07/14/pytest-python-testing-framework</id><content type="html" xml:base="http://localhost:4000/learn-py3/2020/07/14/pytest-python-testing-framework.html">&lt;h2 id=&quot;pytest---python-testing-framework&quot;&gt;PyTest - Python Testing Framework&lt;/h2&gt;

&lt;p&gt;Hi readers, this is an all new post but for already the existing content.&lt;/p&gt;

&lt;p&gt;As one might have seen the other in-built Python testing framework (unittest), unittest framework has it’s own pitfalls.  So, as part of this post, we shall now explore the much newer testing framwork, called the ‘PyTest’.&lt;/p&gt;

&lt;p&gt;PyTest is a much more advanced tseting framework and has a more user friendly calling notations to deal with the various types of assertions.  For instance, unlike in unittest, the user need not remember the different kinds of assertions.  Also with the newly introduced decorators a.k.a. markers, it becomes very easy to mark a test for conditional execution based on the points of considerations.  PyTest brings in many other advancements too.&lt;/p&gt;

&lt;p&gt;Here is a link to the lab sessions on &lt;a href=&quot;https://www.github.com/VSPhaneendraPaluri/learn-py3/tree/master/pvs-labs/02_test_using_pytest&quot;&gt;here&lt;/a&gt;.  The solutions are available under the solutions page.&lt;/p&gt;</content><author><name></name></author><summary type="html">PyTest - Python Testing Framework</summary></entry><entry><title type="html">Using Python UnitTest Framework</title><link href="http://localhost:4000/learn-py3/2019/09/14/using-python-unittest-framework.html" rel="alternate" type="text/html" title="Using Python UnitTest Framework" /><published>2019-09-14T13:12:00+05:30</published><updated>2019-09-14T13:12:00+05:30</updated><id>http://localhost:4000/learn-py3/2019/09/14/using-python-unittest-framework</id><content type="html" xml:base="http://localhost:4000/learn-py3/2019/09/14/using-python-unittest-framework.html">&lt;h2 id=&quot;python-unittest-frameworks&quot;&gt;Python UnitTest Frameworks&lt;/h2&gt;

&lt;p&gt;Python itself provides a unit-testing framework called ‘unittest’.  This post would let introduce the users to this testing framework.  Users can try out my new labs on related to ‘unittest’ framework.  I’ve also tried to provide solutions alongside my labs.  All these part of already downloaded repository to your list.  You may locate them labs &lt;a href=&quot;https://www.github.com/VSPhaneendraPaluri/learn-py3/tree/master/pvs-labs/01_test_using_unittest&quot;&gt;here&lt;/a&gt;.  You may locate the solutions &lt;a href=&quot;https://www.github.com/VSPhaneendraPaluri/learn-py3/tree/master/pvs-solutions/01_test_using_unittest&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;User would find that ‘unittest’ framework provides assertions that are a major component of this testing framework.  There are various kinds of assertions that unittest framework supports.  Only  few of these have been demonstrated over here.&lt;/p&gt;

&lt;p&gt;As user keeps using and knowing more unittest framework, he/she would soon realize that a downside of this tasting framwork is memorizing the assertion types.  Since, there exists many assertions, users should already be aware of all of these for an effective use of this framework for his tests.&lt;/p&gt;

&lt;p&gt;Nevertheless, it is still a very popular and widely used testing framwork by Python coders, though a new wave has already started to sweep-in, that we’ll discuss about in my next post.&lt;/p&gt;

&lt;p&gt;Enjoy Unittest’ing until then … :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Python UnitTest Frameworks</summary></entry><entry><title type="html">Self-learn Python3 with Interactive Labs</title><link href="http://localhost:4000/learn-py3/2019/09/10/self-learn-python3-with-interactive-labs.html" rel="alternate" type="text/html" title="Self-learn Python3 with Interactive Labs" /><published>2019-09-10T09:19:00+05:30</published><updated>2019-09-10T09:19:00+05:30</updated><id>http://localhost:4000/learn-py3/2019/09/10/self-learn-python3-with-interactive-labs</id><content type="html" xml:base="http://localhost:4000/learn-py3/2019/09/10/self-learn-python3-with-interactive-labs.html">&lt;h1 id=&quot;interactive-python3-lab-sessions&quot;&gt;Interactive Python3 Lab-Sessions&lt;/h1&gt;

&lt;p&gt;Here is my first attempt at creating labs for learning Python.  These are documentation-based tests.  Follow the instructions as mentioned within the instruction guide or the introductory slides for Python.&lt;/p&gt;

&lt;p&gt;To get started learning Python3, users may first try to clone the following git repository.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/VSPhaneendraPaluri/learn-py3.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There-after, users may start from &lt;a href=&quot;https://www.github.com/VSPhaneendraPaluri//learn-py3/tree/master/pvs-labs/00_test_using_doctest&quot;&gt;documentation-tests based labs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kindly leave me with your suggestions that you may have.&lt;/p&gt;

&lt;p&gt;Happy Python-ing !! :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Interactive Python3 Lab-Sessions</summary></entry></feed>